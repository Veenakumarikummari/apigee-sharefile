# This workflow will run tests using node and then publish a package to GitHub Packages when code pushed to specifc branch and deploy to Apigee

name: Apigee CICD Using Maven

# Controls when the action will run. Workflow runs when manually triggered using the UI or API.
on:
  workflow_dispatch:
    inputs:
      deployment-env:
        type: choice
        required: true
        description: Environment to deploy
        options:
          - eval
          - dev
          - test
          - uat
          - stage
          - prod
      deployment-region:
        type: choice
        description: Region to deploy
        options:
          - esi-apigee-x-394004
          - NA   
      deployment-apitype:
        type: choice
        description: Api to deploy
        options:
          - sharedflow
          - proxy
env:
  DEPLOYMENT_NAME: Apigee CICD Test # TODO: update to deployment name

  # Default Target Apigee Organization et environment (can be also be dynamically defined in [Set Variables *] steps)
  APIGEE_ORG: ${{ secrets.APIGEE_ORG }} 
  APIGEE_ENV: ${{ secrets.APIGEE_ENV }} 
  API_VERSION: ${{ secrets.API_VERSION }} 
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
  WORKFLOW_IDENTITY_FEDERATION_NAME: ${{ secrets.WORKFLOW_IDENTITY_FEDERATION_NAME }}
  AUTHOR_EMAIL: 'rajeshjanapati@gmail.com'
  APIGEE_DEPLOYMENT_SUFFIX: 'relase_dev'
  APIGEE_BUILD_DEPLOYMENT_SUFFIX: 'apigee_relase_dev'

jobs:
  #Node Build section
  apigee-config-build:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v3
    

    # Setup Maven & Maven Cache
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: 8

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2   

    # Configure Workload Identity Federation and generate an access token.
      - id: 'auth'
        name: 'Authenticate to Google Apigee Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/127369686749/locations/global/workloadIdentityPools/pavan-apigee-git/providers/pavan-apigee-git'
          service_account: 'workload-identity-federation@esi-apigee-x-394004.iam.gserviceaccount.com'

     # Maven Package & Upload Apigee proxy
      - name: mvn package
        run: mvn process-resources -q -P${{github.event.inputs.deployment-env}}  -Dcommit=$GIT_COMMIT -Dbranch=$GIT_BRANCH -Dauthor=$AUTHOR_EMAIL

    # Maven Package & Upload Apigee Budle Config in Apigee
      - name: mvn config
        run: mvn apigee-enterprise:configure -q -P${{github.event.inputs.deployment-env}}  -Dorg=esi-apigee-x-394004 -Denv=eval  -Ddeployment.suffix=$APIGEE_DEPLOYMENT_SUFFIX

    # Maven Deploy uploaded proxy package in to Apigeee
      - name: mvn deploy proxy xhybrid
        run: mvn apigee-enterprise:deploy -q -P${{github.event.inputs.deployment-env}}   -Denv=eval -Dbearer=${{ steps.auth.outputs.access_token }} -Dapigee.org=${{
          github.event.inputs.deployment-region }} -Denv=${{github.event.inputs.deployment-env}}  -Dapigee.apitype==${{github.event.inputs.deployment-apitype}}

    # # Maven Deploy Apigee Config
    #   - name: mvn deploy config xhybrid
    #     run: mvn install -q -Pconfig_de -Dbearer=${{ steps.auth.outputs.access_token }} -Dapigee.config.file=ApigeeConfig/apigee.json -Dapigee.config.options=update

